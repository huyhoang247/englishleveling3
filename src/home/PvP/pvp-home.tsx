import React, { useState, Fragment, useEffect, useCallback, useRef, createContext, useContext, ReactNode, memo, useMemo } from 'react';
import { useGame } from '../../GameContext.tsx';
import { auth } from '../../firebase';
import {
    findInvasionOpponents,
    getBattleHistory,
    getOpponentForBattle,
    recordInvasionResult,
    PvpOpponent,
    BattleHistoryEntry,
    CombatStats,
    claimDefenseReward // [MODIFIED] Import the new function
} from './pvp-service.ts';
import { uiAssets } from '../../game-assets.ts';
import { useAnimateValue } from '../../ui/useAnimateValue.ts';
import CoinDisplay from '../../ui/display/coin-display.tsx'; // Import the new CoinDisplay component

// --- INTERFACES ---
export interface PlayerData {
  name: string;
  avatarUrl: string;
  coins: number;
  initialStats: CombatStats;
}

// ===================================================================================
// --- SHARED UI COMPONENTS ---
// ===================================================================================
const PvpStyles = () => ( <style>{`.main-bg { background-image: url('https://raw.githubusercontent.com/huyhoang247/englishleveling3/main/src/assets/images/pvp-bg.webp'); background-size: cover; background-position: center; } .text-shadow { text-shadow: 2px 2px 4px rgba(0,0,0,0.5); } .animate-fade-in { animation: fadeIn 0.5s ease-out forwards; } .animate-fade-in-scale-fast { animation: fadeInScale 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } @keyframes fadeInScale { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } } .scrollbar-thin::-webkit-scrollbar { width: 4px; } .scrollbar-thin::-webkit-scrollbar-track { background: transparent; } .scrollbar-thin::-webkit-scrollbar-thumb { background: #4a5568; border-radius: 20px; } @keyframes float-up { 0% { transform: translateY(0); opacity: 1; } 100% { transform: translateY(-80px); opacity: 0; } } .animate-float-up { animation: float-up 1.5s ease-out forwards; } @keyframes number-change { 0% { color: #FFD700; text-shadow: 0 0 8px rgba(255, 215, 0, 0.8); transform: scale(1.1); } 100% { color: #fff; text-shadow: none; transform: scale(1); } } .number-changing { animation: number-change 0.3s ease-out; } @keyframes pulse-fast { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } } .animate-pulse-fast { animation: pulse-fast 1s infinite; }`}</style> );
const HomeIcon = ({ className }: { className: string }) => (<svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" /></svg>);
const InvasionIcon = ({ className }: { className: string }) => (<svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>);
const RankedIcon = ({ className }: { className: string }) => (<svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>);
const SearchingModal = ({ text = "Đang tìm kiếm..." }: { text?: string }) => (<div className="text-center animate-fade-in"><h2 className="text-3xl mb-4">{text}</h2><div className="flex justify-center items-center gap-2"><div className="w-4 h-4 bg-sky-400 rounded-full animate-pulse"></div><div className="w-4 h-4 bg-sky-400 rounded-full animate-pulse [animation-delay:0.2s]"></div><div className="w-4 h-4 bg-sky-400 rounded-full animate-pulse [animation-delay:0.4s]"></div></div></div>);
const PvpVictoryModal = memo(({ onFinish, goldStolen, opponentName }: { onFinish: () => void, goldStolen: number, opponentName: string }) => (<div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-40 animate-fade-in"><div className="relative w-80 bg-slate-900/90 border border-yellow-500/30 rounded-xl shadow-2xl shadow-yellow-500/10 animate-fade-in-scale-fast text-white flex flex-col items-center p-6 text-center"><h2 className="text-4xl font-bold text-yellow-300 tracking-widest uppercase mb-2 text-shadow" style={{ textShadow: `0 0 10px rgba(252, 211, 77, 0.7)` }}>VICTORY</h2><p className="font-sans text-slate-300 text-sm mb-4">Bạn đã đánh bại {opponentName}!</p><div className="flex flex-row items-center justify-center gap-2 bg-slate-800/60 w-40 py-1.5 rounded-lg border border-slate-700"><span className="text-xl font-bold text-yellow-300 text-shadow-sm">+{goldStolen.toLocaleString()}</span><img src={uiAssets.coinIcon} alt="Coins" className="w-6 h-6 drop-shadow-[0_1px_2px_rgba(250,204,21,0.5)]" /></div><hr className="w-full border-t border-yellow-500/20 my-5" /><button onClick={onFinish} className="w-full px-8 py-3 bg-blue-600/50 hover:bg-blue-600 rounded-lg font-bold text-base text-blue-50 tracking-wider uppercase border border-blue-500 hover:border-blue-400 transition-all duration-200 active:scale-95">Trở Về</button></div></div>));
const PvpDefeatModal = memo(({ onFinish, opponentName, goldLost }: { onFinish: () => void, opponentName: string, goldLost: number }) => (<div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-40 animate-fade-in"><div className="relative w-80 bg-slate-900/90 border border-slate-700 rounded-xl shadow-2xl shadow-black/30 animate-fade-in-scale-fast text-white flex flex-col items-center p-6 text-center"><h2 className="text-4xl font-bold text-slate-300 tracking-widest uppercase mb-3">DEFEAT</h2><p className="font-sans text-slate-400 text-sm leading-relaxed max-w-xs">Bạn đã bị {opponentName} đánh bại.</p>{goldLost > 0 && (<div className="flex flex-row items-center justify-center gap-2 bg-slate-800/60 w-40 py-1.5 rounded-lg border border-slate-700 mt-3"><span className="text-xl font-bold text-red-400 text-shadow-sm">-{goldLost.toLocaleString()}</span><img src={uiAssets.coinIcon} alt="Coins" className="w-6 h-6" /></div>)}<hr className="w-full border-t border-slate-700/50 my-5" /><button onClick={onFinish} className="w-full px-8 py-3 bg-slate-700/50 hover:bg-slate-700 rounded-lg font-bold text-base text-slate-200 tracking-wider uppercase border border-slate-600 hover:border-slate-500 transition-all duration-200 active:scale-95">Trở Về</button></div></div>));
// [MODIFIED] BattleHistoryModal now handles the reward claiming UI and logic.
const BattleHistoryModal = ({ history, onClose, onClaimReward, claimingId }: { history: BattleHistoryEntry[], onClose: () => void, onClaimReward: (historyId: string, amount: number) => void, claimingId: string | null }) => (<div className="fixed inset-0 z-50 bg-black/70 backdrop-blur-sm flex justify-center items-center" onClick={onClose}><div className="bg-slate-800 border border-slate-600 rounded-xl p-6 w-full max-w-lg animate-fade-in-scale-fast" onClick={e => e.stopPropagation()}><h2 className="text-2xl font-bold text-center mb-4 text-sky-400">Lịch Sử Chiến Đấu</h2><div className="max-h-96 overflow-y-auto space-y-3 pr-2 scrollbar-thin">{history.length > 0 ? history.map((entry) => { const isClaimable = entry.type === 'defense' && entry.result === 'win' && entry.status === 'unclaimed' && entry.goldChange > 0; const isClaiming = claimingId === entry.id; return (<div key={entry.id} className="bg-slate-900/70 p-3 rounded-lg flex justify-between items-center text-sm font-sans"><div><p><span className={`font-bold ${entry.type === 'attack' ? 'text-red-400' : 'text-cyan-400'}`}>{entry.type === 'attack' ? 'Tấn Công' : 'Phòng Thủ'}</span><span className='text-slate-400'> vs </span> <span className="font-bold text-slate-200">{entry.opponentName}</span></p><p className="text-xs text-slate-400">{entry.timestamp.toLocaleString()}</p></div><div className='text-right'><span className={`font-bold text-lg ${entry.result === 'win' ? 'text-green-400' : 'text-red-400'}`}>{entry.result === 'win' ? 'THẮNG' : 'THUA'}</span><p className={`font-semibold ${entry.goldChange >= 0 ? 'text-yellow-400' : 'text-red-400'}`}>{entry.goldChange >= 0 ? `+${entry.goldChange.toLocaleString()}` : entry.goldChange.toLocaleString()}</p>{isClaimable && (<button onClick={() => onClaimReward(entry.id, entry.goldChange)} disabled={isClaiming} className="mt-1 px-3 py-1 text-xs font-bold text-white bg-green-600/80 hover:bg-green-600 rounded-md border border-green-500 transition-all disabled:opacity-50 disabled:cursor-wait">{isClaiming ? 'Đang nhận...' : 'Nhận Thưởng'}</button>)}</div></div>) }) : <p className="text-center text-slate-400 font-sans">Không có dữ liệu.</p>}</div><button onClick={onClose} className="mt-6 w-full py-2 bg-slate-700 hover:bg-slate-600 rounded-lg font-bold uppercase transition-colors">Đóng</button></div></div>);
function ScoutByGoldModal({ isOpen, onClose, onSearch, initialCoins }: {isOpen: boolean; onClose: () => void; onSearch: (goldAmount: number) => void; initialCoins: number;}) { const [amount, setAmount] = useState(initialCoins); const step = 1000; const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => { const value = parseInt(e.target.value, 10); setAmount(isNaN(value) ? 0 : value); }; const handleIncrement = () => setAmount(prev => prev + step); const handleDecrement = () => setAmount(prev => Math.max(0, prev - step)); const handleSearchClick = () => { onSearch(amount); }; if (!isOpen) return null; return (<div className="fixed inset-0 z-50 bg-black/70 backdrop-blur-sm flex justify-center items-center" onClick={onClose}><div className="bg-slate-800 border border-slate-600 rounded-xl p-6 w-full max-w-sm animate-fade-in-scale-fast" onClick={e => e.stopPropagation()}><h2 className="text-2xl font-bold text-center mb-4 text-sky-400">Dò Tìm Theo Vàng</h2><p className="text-center font-sans text-slate-400 mb-6 text-sm">Nhập số vàng bạn muốn cướp từ mục tiêu.</p><div className="flex items-center justify-center gap-2 mb-6"><button onClick={handleDecrement} className="px-4 py-2 bg-slate-700 hover:bg-slate-600 rounded-lg font-bold text-2xl">-</button><input type="number" value={amount} onChange={handleAmountChange} className="w-40 text-center bg-slate-900 border border-slate-600 rounded-lg p-3 text-2xl font-bold text-yellow-300 focus:outline-none focus:ring-2 focus:ring-sky-500" /><button onClick={handleIncrement} className="px-4 py-2 bg-slate-700 hover:bg-slate-600 rounded-lg font-bold text-2xl">+</button></div><button onClick={handleSearchClick} className="w-full py-3 bg-sky-600/80 hover:bg-sky-600 rounded-lg font-bold tracking-wider uppercase border border-sky-500 transition-all">Tìm Kiếm</button></div></div>); }
const HealthBar = memo(({ current, max, colorGradient, shadowColor }: { current: number, max: number, colorGradient: string, shadowColor:string }) => { const scale = Math.max(0, current / max); return (<div className="w-full h-7 bg-black/40 rounded-full border-2 border-slate-700/80 p-1 shadow-inner backdrop-blur-sm"><div className={`h-full rounded-full transition-transform duration-500 ease-out origin-left ${colorGradient}`} style={{ transform: `scaleX(${scale})`, boxShadow: `0 0 8px ${shadowColor}, 0 0 12px ${shadowColor}` }}></div><div className="absolute inset-0 flex justify-center items-center text-sm text-white text-shadow font-bold"><span>{Math.ceil(current)} / {max}</span></div></div>); });
const FloatingText = ({ text, id, extraClasses }: { text: string, id: number, extraClasses: string }) => (<div key={id} className={`absolute top-1/3 text-2xl animate-float-up pointer-events-none ${extraClasses}`} style={{ textShadow: '2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000, 3px 3px 5px rgba(0,0,0,0.7)' }}>{text}</div>);

// --- BATTLE UI & CONTEXT ---
type TurnEvents = { attackerDmg: number; defenderDmg: number; timestamp: number }; type AttackerInfo = { name: string; avatarUrl: string; stats: CombatStats; }; interface PvpBattleState { isLoading: boolean; error: string | null; isSkipping: boolean; attacker: AttackerInfo | null; defender: { name: string; avatarUrl: string; stats: CombatStats; initialCoins: number } | null; combatLog: string[]; gameOver: 'win' | 'loss' | null; battleState: 'idle' | 'fighting' | 'finished'; lastTurnEvents: TurnEvents | null; } interface PvpBattleActions { skipBattle: () => void; } type PvpBattleContextType = PvpBattleState & PvpBattleActions; const PvpBattleContext = createContext<PvpBattleContextType | undefined>(undefined); const PvpBattleProvider = ({ children, attackerData, defenderId, goldToSteal }: { children: ReactNode; attackerData: PlayerData; defenderId: string; goldToSteal: number; }) => { const game = useGame(); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [isSkipping, setIsSkipping] = useState(false); const [attacker, setAttacker] = useState<AttackerInfo | null>({ name: attackerData.name, avatarUrl: attackerData.avatarUrl, stats: attackerData.initialStats }); const [defender, setDefender] = useState<PvpBattleState['defender']>(null); const [combatLog, setCombatLog] = useState<string[]>([]); const [turnCounter, setTurnCounter] = useState(0); const [gameOver, setGameOver] = useState<null | 'win' | 'loss'>(null); const [battleState, setBattleState] = useState<'idle' | 'fighting' | 'finished'>('idle'); const [lastTurnEvents, setLastTurnEvents] = useState<TurnEvents | null>(null); const isEndingGame = useRef(false); const executeFullTurn = useCallback((currentAttacker: CombatStats, currentDefender: CombatStats, turn: number) => { const turnLogs: string[] = []; const log = (msg: string) => turnLogs.push(`[Lượt ${turn}] ${msg}`); const calculateDamage = (atk: number, def: number) => Math.max(1, Math.floor(atk * (0.8 + Math.random() * 0.4) * (1 - def / (def + 100)))); let attackerStats = { ...currentAttacker }; let defenderStats = { ...currentDefender }; let winner: 'win' | 'loss' | null = null; let turnEvents: Omit<TurnEvents, 'timestamp'> = { attackerDmg: 0, defenderDmg: 0 }; const attackerDmg = calculateDamage(attackerStats.atk, defenderStats.def); turnEvents.defenderDmg = attackerDmg; log(`Bạn tấn công, gây <b class="text-red-400">${attackerDmg}</b> sát thương.`); defenderStats.hp -= attackerDmg; if (defenderStats.hp <= 0) { defenderStats.hp = 0; winner = 'win'; log(`Đối thủ đã bị đánh bại!`); return { attacker: attackerStats, defender: defenderStats, turnLogs, winner, turnEvents }; } const defenderDmg = calculateDamage(defenderStats.atk, attackerStats.def); turnEvents.attackerDmg = defenderDmg; log(`Đối thủ phản công, gây <b class="text-red-400">${defenderDmg}</b> sát thương.`); attackerStats.hp -= defenderDmg; if (attackerStats.hp <= 0) { attackerStats.hp = 0; winner = 'loss'; log("Bạn đã gục ngã... THẤT BẠI!"); } return { attacker: attackerStats, defender: defenderStats, turnLogs, winner, turnEvents }; }, []); const endGame = useCallback(async (result: 'win' | 'loss') => { if (isEndingGame.current) return; isEndingGame.current = true; const goldAtStake = goldToSteal; const finalGoldTransfer = result === 'win' ? Math.min(defender?.initialCoins ?? 0, goldAtStake) : goldAtStake; const localPlayerGoldChange = result === 'win' ? finalGoldTransfer : -finalGoldTransfer; try { await recordInvasionResult(auth.currentUser!.uid, defenderId, result, finalGoldTransfer); if (localPlayerGoldChange !== 0) { game.updateUserCurrency({ coins: game.coins + localPlayerGoldChange }); } } catch(e) { console.error("Failed to record battle result:", e); setError("Lỗi khi ghi nhận kết quả trận đấu."); } finally { setGameOver(result); setBattleState('finished'); } }, [defenderId, goldToSteal, defender, game]); const runBattleTurn = useCallback(() => { setTurnCounter(prevTurn => { const nextTurn = prevTurn + 1; setAttacker(prevAttacker => { if (!prevAttacker) return prevAttacker; let updatedAttacker = prevAttacker; setDefender(prevDefender => { if (!prevDefender) return prevDefender; const { attacker: newAttackerStats, defender: newDefenderStats, turnLogs, winner, turnEvents } = executeFullTurn(prevAttacker.stats, prevDefender.stats, nextTurn); updatedAttacker = { ...prevAttacker, stats: newAttackerStats }; setCombatLog(prevLog => [...turnLogs.reverse(), ...prevLog].slice(0, 50)); setLastTurnEvents({ ...turnEvents, timestamp: Date.now() }); if (winner) { setTimeout(() => endGame(winner), 100); } return { ...prevDefender, stats: newDefenderStats }; }); return updatedAttacker; }); return nextTurn; }); }, [executeFullTurn, endGame]); const skipBattle = useCallback(() => { if (isSkipping || gameOver || !attacker || !defender) return; setIsSkipping(true); setTimeout(() => { isEndingGame.current = true; let tempAttacker = attacker.stats; let tempDefender = defender.stats; let tempTurn = turnCounter; let finalWinner: 'win' | 'loss' | null = null; while (finalWinner === null && tempTurn < 500) { tempTurn++; const { attacker: newAttacker, defender: def, winner } = executeFullTurn(tempAttacker, tempDefender, tempTurn); tempAttacker = newAttacker; tempDefender = def; finalWinner = winner; } if (!finalWinner) finalWinner = 'loss'; setAttacker(prev => prev ? { ...prev, stats: tempAttacker } : null); setDefender(prev => prev ? { ...prev, stats: tempDefender } : null); endGame(finalWinner); }, 50); }, [isSkipping, attacker, defender, turnCounter, executeFullTurn, endGame, gameOver]); useEffect(() => { const fetchDefender = async () => { try { const opponentData = await getOpponentForBattle(defenderId); setDefender({ name: opponentData.name, avatarUrl: opponentData.avatarUrl, stats: opponentData.stats, initialCoins: opponentData.coins }); setCombatLog([`[Lượt 0] Trận đấu với ${opponentData.name} bắt đầu!`]); } catch (e) { setError("Không thể tải dữ liệu đối thủ."); console.error(e); } finally { setIsLoading(false); } }; fetchDefender(); }, [defenderId]); useEffect(() => { if (!isLoading && battleState === 'idle' && attacker && defender) { const startTimeout = setTimeout(() => setBattleState('fighting'), 800); return () => clearTimeout(startTimeout); } }, [isLoading, battleState, attacker, defender]); const savedCallback = useRef(runBattleTurn); useEffect(() => { savedCallback.current = runBattleTurn; }, [runBattleTurn]); useEffect(() => { if (battleState === 'fighting' && !gameOver) { const intervalId = setInterval(() => savedCallback.current(), 1200); return () => clearInterval(intervalId); } }, [battleState, gameOver]); const value: PvpBattleContextType = { isLoading, error, isSkipping, attacker, defender, combatLog, gameOver, battleState, lastTurnEvents, skipBattle }; return <PvpBattleContext.Provider value={value}>{children}</PvpBattleContext.Provider>; }; const usePvpBattle = () => { const context = useContext(PvpBattleContext); if (!context) throw new Error('usePvpBattle must be used within a PvpBattleProvider'); return context; };
const PvpBattleView = ({ onFinishBattle, goldToSteal }: { onFinishBattle: (result: 'win' | 'loss', stolen: number) => void, goldToSteal: number }) => { const { isLoading, error, isSkipping, attacker, defender, combatLog, gameOver, battleState, lastTurnEvents, skipBattle } = usePvpBattle(); const [damages, setDamages] = useState<{ id: number, text: string, extraClasses: string }[]>([]); const showFloatingText = useCallback((text: string, colorClass: string, isAttackerSide: boolean) => { const id = Date.now() + Math.random(); const position = isAttackerSide ? 'left-[25%]' : 'right-[25%]'; setDamages(prev => [...prev, { id, text, extraClasses: `${position} ${colorClass}` }]); setTimeout(() => setDamages(prev => prev.filter(d => d.id !== id)), 1500); }, []); useEffect(() => { if (!lastTurnEvents) return; if (lastTurnEvents.defenderDmg > 0) showFloatingText(`-${lastTurnEvents.defenderDmg}`, 'text-red-500', false); setTimeout(() => { if (lastTurnEvents.attackerDmg > 0) showFloatingText(`-${lastTurnEvents.attackerDmg}`, 'text-red-500', true); }, 500); }, [lastTurnEvents, showFloatingText]); if (isLoading) return <div className="flex-grow flex items-center justify-center"><SearchingModal text="Đang tải dữ liệu đối thủ..." /></div>; if (error || !attacker || !defender) return <div className="text-red-400 text-center">{error || "Không có dữ liệu trận đấu."}</div>; const goldStolenOnWin = gameOver === 'win' ? Math.min(defender.initialCoins, goldToSteal) : 0; const goldLostOnDefeat = goldToSteal; return ( <div className="w-full flex-1 flex flex-col items-center justify-between font-lilita text-white p-4 pt-12 animate-fade-in relative"> {damages.map(d => (<FloatingText key={d.id} text={String(d.text)} id={d.id} extraClasses={d.extraClasses} />))} {gameOver === 'win' && <PvpVictoryModal onFinish={() => onFinishBattle('win', goldStolenOnWin)} goldStolen={goldStolenOnWin} opponentName={defender.name} />} {gameOver === 'loss' && <PvpDefeatModal onFinish={() => onFinishBattle('loss', 0)} opponentName={defender.name} goldLost={goldLostOnDefeat} />} <div className="w-full flex justify-between items-start"> <div className="flex flex-col items-center gap-2 w-full max-w-[45%] sm:max-w-xs"> <h2 className="text-xl sm:text-2xl text-sky-400 text-shadow truncate w-full text-center">{attacker.name}</h2> <img src={attacker.avatarUrl} alt={attacker.name} className="w-24 h-24 sm:w-28 sm:h-28 rounded-full border-4 border-slate-600" /> <HealthBar current={attacker.stats.hp} max={attacker.stats.maxHp} colorGradient="bg-gradient-to-r from-green-500 to-lime-400" shadowColor="rgba(132, 204, 22, 0.5)" /> </div> <div className="flex flex-col items-center gap-2 w-full max-w-[45%] sm:max-w-xs"> <h2 className="text-xl sm:text-2xl text-red-400 text-shadow truncate w-full text-center">{defender.name}</h2> <img src={defender.avatarUrl} alt={defender.name} className="w-24 h-24 sm:w-28 sm:h-28 rounded-full border-4 border-slate-600" /> <HealthBar current={defender.stats.hp} max={defender.stats.maxHp} colorGradient="bg-gradient-to-r from-red-600 to-orange-500" shadowColor="rgba(220, 38, 38, 0.5)" /> </div> </div> <div className="w-full max-w-lg h-48 flex flex-col items-center justify-center my-4"> {battleState !== 'idle' && (<div className="h-full w-full bg-slate-900/50 backdrop-blur-sm p-4 rounded-lg border border-slate-700 overflow-y-auto flex flex-col-reverse text-sm leading-relaxed scrollbar-thin font-sans">{combatLog.map((entry, index) => (<p key={index} className={`mb-1 transition-colors duration-300 ${index === 0 ? 'text-yellow-300' : 'text-slate-300'}`} dangerouslySetInnerHTML={{__html: entry}}></p>))}</div>)} </div> {battleState === 'fighting' && !gameOver && ( <button onClick={skipBattle} disabled={isSkipping} className="absolute bottom-4 right-4 font-sans px-4 py-1.5 bg-slate-800/70 backdrop-blur-sm hover:bg-slate-700/80 rounded-lg font-semibold text-xs transition-all duration-200 border border-slate-600 hover:border-orange-400 active:scale-95 shadow-md text-orange-300 disabled:opacity-50 disabled:cursor-wait"> {isSkipping ? 'Đang bỏ qua...' : 'Bỏ Qua'} </button> )} </div> ); };

// ===================================================================================
// --- TOP-LEVEL COMPONENTS ---
// ===================================================================================
function PvpSelection({ onClose, playerData, onSelectMode }: { onClose: () => void; playerData: PlayerData; onSelectMode: (mode: 'invasion') => void; }) { return (<div className="main-bg relative w-full h-screen bg-gradient-to-br from-[#110f21] to-[#2c0f52] flex flex-col items-center font-lilita text-white overflow-hidden"><header className="w-full z-20 p-2 bg-black/30 backdrop-blur-sm border-b border-slate-700/50 shadow-lg h-14 flex-shrink-0"><div className="w-full max-w-7xl mx-auto flex justify-between items-center h-full"><button onClick={onClose} className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-slate-800/80 hover:bg-slate-700 border border-slate-700 transition-colors"><HomeIcon className="w-5 h-5 text-slate-300" /><span className="hidden sm:inline text-sm font-semibold text-slate-300 font-sans">Home</span></button><CoinDisplay displayedCoins={playerData.coins} isStatsFullscreen={false} /></div></header><main className="w-full flex-1 overflow-y-auto p-4 pt-12 flex flex-col items-center">
    <div className="flex justify-center items-stretch w-full max-w-2xl gap-6">
      {/* Invasion Card */}
      <div onClick={() => onSelectMode('invasion')} className="group relative cursor-pointer bg-slate-900/50 border-2 border-slate-700 rounded-2xl p-6 flex flex-col items-center justify-center text-center backdrop-blur-sm transition-all duration-300 hover:border-sky-500/80 hover:scale-105 hover:shadow-2xl hover:shadow-sky-500/10 w-1/2"><InvasionIcon className="w-10 h-10 mb-4 text-slate-400 transition-colors duration-300 group-hover:text-sky-400" /><h2 className="text-2xl font-bold text-shadow text-sky-400 tracking-wider">Invasion</h2><p className="font-sans text-sm text-slate-400 mt-2">Tấn công người chơi khác để cướp tài nguyên và leo lên bảng xếp hạng.</p></div>
      {/* Ranked Card */}
      <div className="group relative bg-slate-900/50 border-2 border-slate-700 rounded-2xl p-6 flex flex-col items-center justify-center text-center backdrop-blur-sm w-1/2 opacity-60 grayscale cursor-not-allowed">
        <div className="absolute top-2 right-2 bg-yellow-500 text-yellow-900 text-xs font-bold uppercase px-2 py-0.5 rounded-full">Coming Soon</div>
        <RankedIcon className="w-10 h-10 mb-4 text-slate-500" /><h2 className="text-2xl font-bold text-shadow text-slate-500 tracking-wider">Ranked</h2><p className="font-sans text-sm text-slate-500 mt-2">Cạnh tranh vinh quang và leo lên bảng xếp hạng.</p>
      </div>
    </div>
  </main></div>); }

// [MODIFIED] Component now receives and passes down claim-related props
function PvpInvasion({ onClose, player1, battleHistory, onClaimReward, claimingId }: { onClose: () => void; player1: PlayerData; battleHistory: BattleHistoryEntry[]; onClaimReward: (historyId: string, amount: number) => void; claimingId: string | null; }) {
    const { coins } = useGame();
    const [view, setView] = useState<'main' | 'scouting' | 'battleUI'>('main');
    const [opponents, setOpponents] = useState<PvpOpponent[]>([]);
    const [currentTarget, setCurrentTarget] = useState<PvpOpponent | null>(null);
    const [showHistoryModal, setShowHistoryModal] = useState(false);
    const [isActionInProgress, setIsActionInProgress] = useState(false);
    const [isScoutModalOpen, setIsScoutModalOpen] = useState(false);
    const [searchAmount, setSearchAmount] = useState(0);
    const animatedCoins = useAnimateValue(coins);
    const executeSearch = async (goldAmount: number) => { setIsScoutModalOpen(false); if (isActionInProgress) return; setSearchAmount(goldAmount); setIsActionInProgress(true); setView('scouting'); try { const foundOpponents = await findInvasionOpponents(auth.currentUser!.uid, goldAmount); setOpponents(foundOpponents); } catch (error) { console.error("Failed to scout opponents by gold:", error); alert("Không thể tìm thấy đối thủ. Vui lòng thử lại."); setView('main'); } finally { setIsActionInProgress(false); } };
    const handleAttack = (target: PvpOpponent) => { if (isActionInProgress) return; setCurrentTarget(target); setView('battleUI'); };
    const reset = useCallback(() => { setView('main'); setOpponents([]); setCurrentTarget(null); setSearchAmount(0); setIsActionInProgress(false); }, []);
    const handleBattleFinish = useCallback((result: 'win' | 'loss', stolen: number) => { reset(); onClose(); }, [reset, onClose]);

    return (<div className="main-bg relative w-full h-screen bg-gradient-to-br from-[#110f21] to-[#2c0f52] flex flex-col items-center font-lilita text-white overflow-hidden">
      <ScoutByGoldModal isOpen={isScoutModalOpen} onClose={() => setIsScoutModalOpen(false)} onSearch={executeSearch} initialCoins={1000} />
      {showHistoryModal && <BattleHistoryModal history={battleHistory} onClose={() => setShowHistoryModal(false)} onClaimReward={onClaimReward} claimingId={claimingId} />}
      <header className="w-full z-20 p-2 bg-black/30 backdrop-blur-sm border-b border-slate-700/50 shadow-lg h-14 flex-shrink-0"><div className="w-full max-w-6xl mx-auto flex justify-between items-center h-full"><button onClick={view === 'battleUI' ? onClose : onClose} className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-slate-800/80 hover:bg-slate-700 border border-slate-700 transition-colors"><HomeIcon className="w-5 h-5 text-slate-300" /><span className="hidden sm:inline text-sm font-semibold text-slate-300 font-sans">Home</span></button><h1 className="text-2xl font-bold text-sky-400 text-shadow tracking-widest">Invasion</h1><CoinDisplay displayedCoins={animatedCoins} isStatsFullscreen={false} /></div></header>
      <main className="w-full flex-1 flex flex-col items-center">
        {view === 'main' && (<div className="w-full max-w-sm p-4 pt-12 animate-fade-in-scale-fast">
          <div className="flex flex-col gap-4 max-w-xs mx-auto w-full">
            <button onClick={() => setIsScoutModalOpen(true)} disabled={isActionInProgress} className="w-full py-3 bg-sky-600/50 hover:bg-sky-600 rounded-lg font-bold tracking-wider uppercase border border-sky-500 disabled:bg-slate-600/50 disabled:cursor-not-allowed">Scout Target</button>
            <button onClick={() => alert("Feature in development!")} className="w-full py-3 bg-slate-700/50 hover:bg-slate-700 rounded-lg font-bold tracking-wider uppercase border border-slate-600">Setup Defense</button>
            <button onClick={() => setShowHistoryModal(true)} className="w-full py-3 bg-slate-700/50 hover:bg-slate-700 rounded-lg font-bold tracking-wider uppercase border border-slate-600">Battle History</button>
          </div>
        </div>)}
        {view === 'scouting' && (<div className="w-full max-w-4xl animate-fade-in p-4 pt-20"><h2 className="text-3xl text-center mb-6">Chọn Mục Tiêu Tấn Công</h2>{isActionInProgress && opponents.length === 0 ? <SearchingModal /> : !isActionInProgress && opponents.length === 0 ? (<div className="text-center text-slate-400 font-sans p-8 bg-slate-900/50 rounded-lg"><h3 className="text-xl text-white mb-2">Không tìm thấy đối thủ</h3><p>Không có người chơi nào có đủ {searchAmount.toLocaleString()} vàng để bạn cướp.</p></div>) : (<div className="grid grid-cols-1 md:grid-cols-3 gap-6">{opponents.map((op, index) => (<div key={index} className="bg-slate-900/70 p-4 rounded-lg border border-slate-700 flex flex-col items-center gap-2 text-center"><img src={op.avatarUrl} alt={op.name} className="w-24 h-24 rounded-full border-2 border-slate-600 mb-2" /><h3 className="text-xl font-bold">{op.name}</h3><p className="font-sans text-sm text-slate-400">Tổng Vàng: <span className="text-slate-200 font-semibold">{op.coins.toLocaleString()}</span></p><div className='mt-2'><p className="font-sans text-sm text-slate-400">Vàng có thể cướp:</p><p className="font-bold text-lg text-yellow-300">{searchAmount.toLocaleString()}</p></div><button onClick={() => handleAttack(op)} className="mt-4 w-full py-2 bg-red-600/50 hover:bg-red-600 rounded-lg font-bold border border-red-500">Tấn Công</button></div>))}</div>)}<div className="text-center mt-8"><button onClick={reset} className="font-sans text-slate-400 hover:text-white underline">Hủy và quay lại</button></div></div>)}
        {view === 'battleUI' && currentTarget && (<PvpBattleProvider attackerData={player1} defenderId={currentTarget.userId} goldToSteal={searchAmount}><PvpBattleView onFinishBattle={handleBattleFinish} goldToSteal={searchAmount} /></PvpBattleProvider>)}
      </main>
    </div>);
}

export default function PvpArena({ onClose }: { onClose: () => void }) {
  const { coins, getPlayerBattleStats, updateUserCurrency } = useGame();
  const currentUser = auth.currentUser;
  const [battleHistory, setBattleHistory] = useState<BattleHistoryEntry[]>([]);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true);
  const [claimingId, setClaimingId] = useState<string | null>(null); // [NEW] State to track which reward is being claimed
  const [mode, setMode] = useState<'selection' | 'invasion'>('selection');

  const fetchHistory = useCallback(() => {
    if (currentUser) {
      setIsLoadingHistory(true);
      getBattleHistory(currentUser.uid)
        .then(history => setBattleHistory(history))
        .catch(err => { console.error("Failed to fetch battle history:", err); alert("Không thể tải lịch sử chiến đấu."); })
        .finally(() => setIsLoadingHistory(false));
    }
  }, [currentUser]);

  useEffect(() => { fetchHistory(); }, [fetchHistory]);

  // [NEW] Handler function to claim a defense reward
  const handleClaimReward = async (historyId: string, amount: number) => {
    if (claimingId || !currentUser) return;
    setClaimingId(historyId);
    try {
      await claimDefenseReward(currentUser.uid, historyId);
      updateUserCurrency({ coins: coins + amount });
      // Update local state immediately for better UX
      setBattleHistory(prevHistory =>
        prevHistory.map(entry =>
          entry.id === historyId ? { ...entry, status: 'claimed' } : entry
        )
      );
    } catch (error) {
      alert((error as Error).message);
    } finally {
      setClaimingId(null);
    }
  };

  const handleModeChange = (newMode: 'selection' | 'invasion') => {
    setMode(newMode);
    if (newMode === 'selection') {
      fetchHistory(); // Refresh history when returning to selection screen
    }
  };

  const playerData: PlayerData | null = useMemo(() => {
    if (!currentUser) return null;
    const battleStats = getPlayerBattleStats();
    return { name: currentUser.displayName || "Adventurer", avatarUrl: currentUser.photoURL || `https://api.dicebear.com/8.x/adventurer/svg?seed=${currentUser.uid}`, coins: coins, initialStats: { ...battleStats, maxHp: battleStats.hp, critRate: 0.1, critDmg: 1.5, healPower: 50, reflectDmg: 10 } };
  }, [currentUser, coins, getPlayerBattleStats]);

  const renderContent = () => {
    if (mode === 'invasion') {
        // [MODIFIED] Pass down the new handler and state
        return <PvpInvasion player1={playerData!} battleHistory={battleHistory} onClose={() => handleModeChange('selection')} onClaimReward={handleClaimReward} claimingId={claimingId} />;
    }
    return <PvpSelection playerData={playerData!} onSelectMode={handleModeChange} onClose={onClose} />;
  }
  
  if (!currentUser || !playerData) { 
    return ( <div className="w-full h-screen bg-black flex items-center justify-center text-white"><p>Vui lòng đăng nhập để truy cập Đấu trường.</p></div> ); 
  }

  return ( 
    <Fragment> 
      <PvpStyles /> 
      {isLoadingHistory ? <div className="w-full h-screen bg-black flex items-center justify-center text-white">Đang tải dữ liệu...</div> : renderContent()} 
    </Fragment> 
  );
}
