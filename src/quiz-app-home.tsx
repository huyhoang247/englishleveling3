import { useState } from 'react';

export default function QuizApp() {
  const [currentView, setCurrentView] = useState('main');
  const [selectedQuiz, setSelectedQuiz] = useState(null);
  const [selectedType, setSelectedType] = useState(null);
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [timer, setTimer] = useState(0); // C·∫ßn th√™m logic ƒë·ªÉ qu·∫£n l√Ω timer

  // H√†m x·ª≠ l√Ω khi ch·ªçn Quiz
  const handleQuizSelect = (quiz) => {
    setSelectedQuiz(quiz);
    setCurrentView('quizTypes');
    setCurrentQuestion(1); // Reset c√¢u h·ªèi khi ch·ªçn quiz m·ªõi
    setSelectedAnswer(null); // Reset ƒë√°p √°n khi ch·ªçn quiz m·ªõi
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn lo·∫°i (Tr·∫Øc nghi·ªám ho·∫∑c ƒêi·ªÅn t·ª´)
  const handleTypeSelect = (type) => {
    setSelectedType(type);
    setCurrentQuestion(1); // Reset c√¢u h·ªèi khi ch·ªçn lo·∫°i m·ªõi
    setSelectedAnswer(null); // Reset ƒë√°p √°n khi ch·ªçn lo·∫°i m·ªõi
    if (type === 'tracNghiem') {
      setCurrentView('practices');
    } else {
      setCurrentView('fillInBlanks');
    }
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn Practice
  const handlePracticeSelect = (practice) => {
    setCurrentView(`practice${practice}`);
    setCurrentQuestion(1); // Reset c√¢u h·ªèi khi ch·ªçn practice m·ªõi
    setSelectedAnswer(null); // Reset ƒë√°p √°n khi ch·ªçn practice m·ªõi
    // C·∫ßn th√™m logic ƒë·ªÉ t·∫£i d·ªØ li·ªáu c√¢u h·ªèi cho practice ƒë√£ ch·ªçn
  };

  // H√†m quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
  const goBack = () => {
    if (currentView === 'quizTypes') {
      setCurrentView('main');
      setSelectedQuiz(null);
    } else if (currentView === 'practices' || currentView === 'fillInBlanks') {
      setCurrentView('quizTypes');
      setSelectedType(null);
    } else if (currentView.startsWith('practice')) {
      setCurrentView('practices');
    }
    setCurrentQuestion(1); // Reset c√¢u h·ªèi khi quay l·∫°i
    setSelectedAnswer(null); // Reset ƒë√°p √°n khi quay l·∫°i
  };

  // H√†m quay v·ªÅ m√†n h√¨nh ch√≠nh
  const goHome = () => {
    setCurrentView('main');
    setSelectedQuiz(null);
    setSelectedType(null);
    setCurrentQuestion(1); // Reset c√¢u h·ªèi khi v·ªÅ trang ch·ªß
    setSelectedAnswer(null); // Reset ƒë√°p √°n khi v·ªÅ trang ch·ªß
  };

  // Th√™m c√°c h√†m n√†y sau c√°c h√†m hi·ªán c√≥
  const handleNextQuestion = () => {
    // Logic ƒë·ªÉ chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
    // C·∫ßn th√™m ki·ªÉm tra xem c√≤n c√¢u h·ªèi n√†o n·ªØa kh√¥ng
    setCurrentQuestion(prev => prev + 1);
    setSelectedAnswer(null);
    // C·∫ßn th√™m logic ƒë·ªÉ t·∫£i c√¢u h·ªèi ti·∫øp theo
  };

  const handlePrevQuestion = () => {
    // Logic ƒë·ªÉ quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
    if (currentQuestion > 1) {
      setCurrentQuestion(prev => prev - 1);
      setSelectedAnswer(null);
      // C·∫ßn th√™m logic ƒë·ªÉ t·∫£i c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
    }
  };

  const handleSelectAnswer = (answer) => {
    setSelectedAnswer(answer);
    // C·∫ßn th√™m logic ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n v√† x·ª≠ l√Ω k·∫øt qu·∫£
  };


  // Render n·ªôi dung t√πy thu·ªôc v√†o view hi·ªán t·∫°i
  const renderContent = () => {
    switch(currentView) {
      case 'main':
        return (
          <div className="flex flex-col items-center gap-6">
            <div className="text-center mb-2">
              <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">Quiz App</h1>
              <p className="text-gray-600 mt-2">Ch·ªçn b·ªô quiz ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p</p>
            </div>

            <div className="grid grid-cols-2 gap-4 w-full">
              <button
                onClick={() => handleQuizSelect(1)}
                className="bg-gradient-to-br from-blue-500 to-blue-600 text-white py-6 px-6 rounded-xl shadow-md transform transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium flex flex-col items-center"
              >
                <span className="text-3xl mb-2">üìö</span>
                <span className="text-lg">Quiz 1</span>
                <span className="text-xs text-blue-100 mt-1">10 c√¢u h·ªèi</span>
              </button>
              <button
                onClick={() => handleQuizSelect(2)}
                className="bg-gradient-to-br from-purple-500 to-purple-600 text-white py-6 px-6 rounded-xl shadow-md transform transition-all duration-300 hover:scale-105 hover:shadow-lg font-medium flex flex-col items-center"
              >
                <span className="text-3xl mb-2">üß†</span>
                <span className="text-lg">Quiz 2</span>
                <span className="text-xs text-purple-100 mt-1">8 c√¢u h·ªèi</span>
              </button>
            </div>
          </div>
        );

      case 'quizTypes':
        return (
          <div className="flex flex-col items-center gap-4">
            <div className="text-center mb-4">
              <span className="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full mb-2">Quiz {selectedQuiz}</span>
              <h1 className="text-2xl font-bold text-gray-800">Ch·ªçn lo·∫°i b√†i t·∫≠p</h1>
              <div className="w-16 h-1 bg-blue-500 mx-auto mt-2 rounded-full"></div>
            </div>

            <div className="grid grid-cols-2 gap-4 w-full">
              <button
                onClick={() => handleTypeSelect('tracNghiem')}
                className="bg-white border-2 border-green-400 hover:bg-green-50 text-green-600 py-5 px-4 rounded-lg shadow-sm transition-all duration-300 hover:shadow-md flex flex-col items-center"
              >
                <span className="text-3xl mb-2">üîç</span>
                <span className="font-medium">Tr·∫Øc Nghi·ªám</span>
                <span className="text-xs text-gray-500 mt-1">Ch·ªçn ƒë√°p √°n ƒë√∫ng</span>
              </button>
              <button
                onClick={() => handleTypeSelect('dienTu')}
                className="bg-white border-2 border-yellow-400 hover:bg-yellow-50 text-yellow-600 py-5 px-4 rounded-lg shadow-sm transition-all duration-300 hover:shadow-md flex flex-col items-center"
              >
                <span className="text-3xl mb-2">‚úèÔ∏è</span>
                <span className="font-medium">ƒêi·ªÅn T·ª´</span>
                <span className="text-xs text-gray-500 mt-1">ƒêi·ªÅn t·ª´ c√≤n thi·∫øu</span>
              </button>
            </div>
          </div>
        );

      case 'practices':
        return (
          <div className="flex flex-col items-center gap-4">
            <div className="flex items-center gap-2 mb-2">
               {/* Breadcrumbs */}
              <button onClick={() => setCurrentView('quizTypes')} className="text-blue-600 hover:underline text-xs">Quiz {selectedQuiz}</button>
              <span className="text-gray-400 text-xs">/</span>
              <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">Tr·∫Øc Nghi·ªám</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-800 mb-6">Ch·ªçn b√†i t·∫≠p</h1>

            <div className="space-y-4 w-full">
              <button
                onClick={() => handlePracticeSelect(1)}
                className="w-full bg-white border border-gray-200 hover:border-indigo-300 py-4 px-5 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 flex justify-between items-center group"
              >
                <div className="flex items-center">
                  <div className="bg-indigo-100 text-indigo-600 rounded-full w-10 h-10 flex items-center justify-center mr-4 group-hover:bg-indigo-200">
                    <span>1</span>
                  </div>
                  <div className="text-left">
                    <h3 className="font-medium text-gray-800">Practice 1</h3>
                    <p className="text-xs text-gray-500">5 c√¢u h·ªèi ‚Ä¢ Th·ªùi gian: 5 ph√∫t</p>
                  </div>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400 group-hover:text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>

              <button
                onClick={() => handlePracticeSelect(2)}
                className="w-full bg-white border border-gray-200 hover:border-pink-300 py-4 px-5 rounded-xl shadow-sm hover:shadow-md transition-all duration-300 flex justify-between items-center group"
              >
                <div className="flex items-center">
                  <div className="bg-pink-100 text-pink-600 rounded-full w-10 h-10 flex items-center justify-center mr-4 group-hover:bg-pink-200">
                    <span>2</span>
                  </div>
                  <div className="text-left">
                    <h3 className="font-medium text-gray-800">Practice 2</h3>
                    <p className="text-xs text-gray-500">7 c√¢u h·ªèi ‚Ä¢ Th·ªùi gian: 7 ph√∫t</p>
                  </div>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400 group-hover:text-pink-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>
        );

      case 'fillInBlanks':
        return (
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-4">
              {/* Breadcrumbs */}
              <button onClick={() => setCurrentView('quizTypes')} className="text-blue-600 hover:underline text-xs">Quiz {selectedQuiz}</button>
              <span className="text-gray-400 text-xs">/</span>
              <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full">ƒêi·ªÅn T·ª´</span>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
              <div className="flex justify-between items-center mb-6">
                <span className="bg-yellow-50 text-yellow-700 text-xs px-3 py-1 rounded-full">C√¢u {currentQuestion}/5</span> {/* S·ª≠ d·ª•ng state currentQuestion */}
                <span className="text-gray-500 text-sm">Th·ªùi gian: 00:45</span> {/* C·∫ßn th√™m logic timer */}
              </div>

              <div className="p-5 bg-gray-50 rounded-lg mb-5">
                <p className="text-lg mb-4 text-gray-700">Ho√†n th√†nh c√¢u sau ƒë√¢y:</p>
                {/* N·ªôi dung c√¢u h·ªèi ƒëi·ªÅn t·ª´ - C·∫ßn thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø */}
                <p className="text-xl font-medium mb-2">The cat <span className="text-yellow-600 border-b-2 border-yellow-400 px-1">___</span> on the mat.</p>
                <div className="mt-5">
                  <input
                    type="text"
                    placeholder="ƒêi·ªÅn t·ª´ v√†o ƒë√¢y"
                    className="border-2 border-gray-300 focus:border-yellow-400 focus:ring focus:ring-yellow-100 p-3 rounded-lg w-full outline-none transition-all"
                    // C·∫ßn th√™m state ƒë·ªÉ l∆∞u gi√° tr·ªã input
                  />
                </div>
              </div>

              <div className="flex justify-between">
                <button
                  onClick={handlePrevQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u tr∆∞·ªõc
                  className="text-gray-500 flex items-center px-4 py-2 rounded-lg hover:bg-gray-100 transition-colors"
                  disabled={currentQuestion === 1} // Disable n√∫t "C√¢u tr∆∞·ªõc" ·ªü c√¢u ƒë·∫ßu ti√™n
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  C√¢u tr∆∞·ªõc
                </button>
                <button
                   onClick={handleNextQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u ti·∫øp
                   className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-lg shadow-sm hover:shadow-md transition-all flex items-center"
                   // C·∫ßn th√™m logic ƒë·ªÉ ki·ªÉm tra xem ƒë√£ h·∫øt c√¢u h·ªèi ch∆∞a ƒë·ªÉ hi·ªÉn th·ªã n√∫t "Ho√†n th√†nh"
                >
                  C√¢u ti·∫øp
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        );

      case 'practice1':
        return (
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-4">
              {/* Breadcrumbs */}
              <button onClick={() => setCurrentView('quizTypes')} className="text-blue-600 hover:underline text-xs">Quiz {selectedQuiz}</button>
              <span className="text-gray-400 text-xs">/</span>
              <button onClick={() => setCurrentView('practices')} className="text-green-600 hover:underline text-xs">Tr·∫Øc Nghi·ªám</button>
               <span className="text-gray-400 text-xs">/</span>
              <span className="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full">Practice 1</span>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
              <div className="mb-6 flex justify-between items-center">
                <div className="flex gap-2">
                  <span className="bg-indigo-50 text-indigo-700 text-xs px-3 py-1 rounded-full">C√¢u {currentQuestion}/5</span> {/* S·ª≠ d·ª•ng state currentQuestion */}
                </div>
                <span className="text-gray-500 text-sm">Th·ªùi gian: 01:25</span> {/* C·∫ßn th√™m logic timer */}
              </div>

              <div className="mb-6 text-left">
                 {/* N·ªôi dung c√¢u h·ªèi tr·∫Øc nghi·ªám - C·∫ßn thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø */}
                <p className="text-xl font-semibold mb-4 text-gray-800">What is the capital of France?</p>
                <div className="space-y-3">
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'London' ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200 hover:border-indigo-200 hover:bg-indigo-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-indigo-600 h-5 w-5"
                      checked={selectedAnswer === 'London'}
                      onChange={() => handleSelectAnswer('London')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">London</span>
                  </label>
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'Paris' ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200 hover:border-indigo-200 hover:bg-indigo-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-indigo-600 h-5 w-5"
                      checked={selectedAnswer === 'Paris'}
                      onChange={() => handleSelectAnswer('Paris')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">Paris</span>
                  </label>
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'Berlin' ? 'border-indigo-500 bg-indigo-50' : 'border-gray-200 hover:border-indigo-200 hover:bg-indigo-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-indigo-600 h-5 w-5"
                      checked={selectedAnswer === 'Berlin'}
                      onChange={() => handleSelectAnswer('Berlin')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">Berlin</span>
                  </label>
                </div>
              </div>

              <div className="flex justify-between mt-8">
                <button
                  onClick={handlePrevQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u tr∆∞·ªõc
                  className="text-gray-500 flex items-center px-4 py-2 rounded-lg hover:bg-gray-100 transition-colors"
                  disabled={currentQuestion === 1} // Disable n√∫t "C√¢u tr∆∞·ªõc" ·ªü c√¢u ƒë·∫ßu ti√™n
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  C√¢u tr∆∞·ªõc
                </button>
                <button
                  onClick={handleNextQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u ti·∫øp
                  className="bg-indigo-500 hover:bg-indigo-600 text-white px-6 py-2 rounded-lg shadow-sm hover:shadow-md transition-all flex items-center"
                  // C·∫ßn th√™m logic ƒë·ªÉ ki·ªÉm tra xem ƒë√£ h·∫øt c√¢u h·ªèi ch∆∞a ƒë·ªÉ hi·ªÉn th·ªã n√∫t "Ho√†n th√†nh"
                >
                  C√¢u ti·∫øp
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="mt-4 bg-white p-4 rounded-xl shadow-sm border border-gray-100">
              {/* Hi·ªÉn th·ªã ti·∫øn tr√¨nh c√¢u h·ªèi - C·∫ßn th√™m logic d·ª±a tr√™n t·ªïng s·ªë c√¢u h·ªèi */}
              <div className="flex justify-center gap-2">
                {Array.from({ length: 5 }).map((_, index) => (
                  <span
                    key={index}
                    className={`w-3 h-3 rounded-full ${index < currentQuestion ? 'bg-indigo-500' : 'bg-gray-300'}`}
                  ></span>
                ))}
              </div>
            </div>
          </div>
        );

      case 'practice2':
        return (
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-4">
              {/* Breadcrumbs */}
              <button onClick={() => setCurrentView('quizTypes')} className="text-blue-600 hover:underline text-xs">Quiz {selectedQuiz}</button>
              <span className="text-gray-400 text-xs">/</span>
              <button onClick={() => setCurrentView('practices')} className="text-green-600 hover:underline text-xs">Tr·∫Øc Nghi·ªám</button>
               <span className="text-gray-400 text-xs">/</span>
              <span className="bg-pink-100 text-pink-800 text-xs px-2 py-1 rounded-full">Practice 2</span>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-md border border-gray-100">
              <div className="mb-6 flex justify-between items-center">
                <div className="flex gap-2">
                  <span className="bg-pink-50 text-pink-700 text-xs px-3 py-1 rounded-full">C√¢u {currentQuestion}/7</span> {/* S·ª≠ d·ª•ng state currentQuestion */}
                </div>
                <span className="text-gray-500 text-sm">Th·ªùi gian: 01:25</span> {/* C·∫ßn th√™m logic timer */}
              </div>

              <div className="mb-6 text-left">
                 {/* N·ªôi dung c√¢u h·ªèi tr·∫Øc nghi·ªám - C·∫ßn thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø */}
                <p className="text-xl font-semibold mb-4 text-gray-800">Which planet is known as the Red Planet?</p>
                <div className="space-y-3">
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'Venus' ? 'border-pink-500 bg-pink-50' : 'border-gray-200 hover:border-pink-200 hover:bg-pink-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-pink-600 h-5 w-5"
                      checked={selectedAnswer === 'Venus'}
                      onChange={() => handleSelectAnswer('Venus')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">Venus</span>
                  </label>
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'Mars' ? 'border-pink-500 bg-pink-50' : 'border-gray-200 hover:border-pink-200 hover:bg-pink-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-pink-600 h-5 w-5"
                      checked={selectedAnswer === 'Mars'}
                      onChange={() => handleSelectAnswer('Mars')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">Mars</span>
                  </label>
                  <label className={`flex items-center p-4 rounded-lg border transition-all cursor-pointer ${selectedAnswer === 'Jupiter' ? 'border-pink-500 bg-pink-50' : 'border-gray-200 hover:border-pink-200 hover:bg-pink-50'}`}> {/* S·ª≠ d·ª•ng state selectedAnswer */}
                    <input
                      type="radio"
                      name="q1"
                      className="form-radio text-pink-600 h-5 w-5"
                      checked={selectedAnswer === 'Jupiter'}
                      onChange={() => handleSelectAnswer('Jupiter')} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω ch·ªçn ƒë√°p √°n
                    />
                    <span className="ml-3 text-gray-700">Jupiter</span>
                  </label>
                </div>
              </div>

              <div className="flex justify-between mt-8">
                <button
                  onClick={handlePrevQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u tr∆∞·ªõc
                  className="text-gray-500 flex items-center px-4 py-2 rounded-lg hover:bg-gray-100 transition-colors"
                  disabled={currentQuestion === 1} // Disable n√∫t "C√¢u tr∆∞·ªõc" ·ªü c√¢u ƒë·∫ßu ti√™n
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  C√¢u tr∆∞·ªõc
                </button>
                <button
                  onClick={handleNextQuestion} // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω c√¢u ti·∫øp
                  className="bg-pink-500 hover:bg-pink-600 text-white px-6 py-2 rounded-lg shadow-sm hover:shadow-md transition-all flex items-center"
                  // C·∫ßn th√™m logic ƒë·ªÉ ki·ªÉm tra xem ƒë√£ h·∫øt c√¢u h·ªèi ch∆∞a ƒë·ªÉ hi·ªÉn th·ªã n√∫t "Ho√†n th√†nh"
                >
                  C√¢u ti·∫øp
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="mt-4 bg-white p-4 rounded-xl shadow-sm border border-gray-100">
              {/* Hi·ªÉn th·ªã ti·∫øn tr√¨nh c√¢u h·ªèi - C·∫ßn th√™m logic d·ª±a tr√™n t·ªïng s·ªë c√¢u h·ªèi */}
              <div className="flex justify-center gap-2">
                {Array.from({ length: 7 }).map((_, index) => (
                  <span
                    key={index}
                    className={`w-3 h-3 rounded-full ${index < currentQuestion ? 'bg-pink-500' : 'bg-gray-300'}`}
                  ></span>
                ))}
              </div>
            </div>
          </div>
        );

      default:
        return <div>N·ªôi dung kh√¥ng t·ªìn t·∫°i</div>;
    }
  };

  // Thay ƒë·ªïi ph·∫ßn return cu·ªëi c√πng ƒë·ªÉ c√≥ background v√† container ƒë·∫πp h∆°n
  return (
    <div className="fixed inset-0 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="w-full h-full flex items-center justify-center"> {/* Th√™m flexbox ƒë·ªÉ cƒÉn gi·ªØa n·ªôi dung */}
        <div className="w-full max-w-lg bg-white rounded-xl shadow-xl overflow-hidden transition-all duration-300 transform hover:shadow-2xl"> {/* Gi·ªØ l·∫°i max-w-lg cho n·ªôi dung b√™n trong ƒë·ªÉ kh√¥ng qu√° r·ªông tr√™n m√†n h√¨nh l·ªõn */}
          <div className="h-2 bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600"></div>

          <div className="p-6">
            {/* Navigation bar */}
            {currentView !== 'main' && (
              <div className="flex justify-between mb-6">
                <button
                  onClick={goBack}
                  className="flex items-center text-blue-600 hover:text-blue-800 transition-colors"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                  Quay l·∫°i
                </button>

                <button
                  onClick={goHome}
                  className="flex items-center text-blue-600 hover:text-blue-800 transition-colors"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                  </svg>
                  Trang ch·ªß
                </button>
              </div>
            )}

            {/* Main content v·ªõi animation */}
            <div className="py-4 transition-all duration-500 ease-in-out">
              {renderContent()}
            </div>
          </div>

          {/* Footer ƒë√£ ƒë∆∞·ª£c x√≥a */}
          {/* <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-t border-blue-100">
            <p className="text-center text-gray-600 text-sm">¬© 2025 ·ª®ng d·ª•ng Quiz | H·ªçc m·ªçi l√∫c, m·ªçi n∆°i</p>
          </div> */}
        </div>
      </div>
    </div>
  );
}
